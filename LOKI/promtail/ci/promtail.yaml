apiVersion: v1
kind: ConfigMap
metadata:
  name: promtail
  namespace: default
  labels:
    helm.sh/chart: promtail-6.11.2
    app.kubernetes.io/name: promtail
    app.kubernetes.io/instance: promtail
    app.kubernetes.io/version: "2.8.4"
    app.kubernetes.io/managed-by: Helm
data:
  promtail.yaml: |
    server:
      log_level: info
      log_format: json
      http_listen_port: 3101
      graceful_shutdown_timeout: 30s

    clients:
      # Loki监听的URL，以http_listen_address和http_listen_port在Loki中表示。
      # 如果Loki以微服务模式运行，则这是Distributor的HTTP URL。需要包含推送API的路径。
      - url: http://loki-loki-distributed-gateway/loki/api/v1/push
        # 默认用于将日志推送到Loki的租户ID。
        # tenant_id: fake
        # 在发送批处理之前等待的最长时间，即使该批处理未满。
        batchwait: 3s
        # 在将批处理发送到Loki之前累积的日志的最大批处理大小（以字节为单位）
        batchsize: 4048576
        # 禁用对Loki以429状态码（TooManyRequests）响应的批处理的重试。
        # 这减少了来自其他租户的批处理的影响，这些批处理可能由于指数回退而被延迟或丢弃。
        drop_rate_limited_batches: true
        # 添加到发送到Loki的所有日志的静态标签。
        external_labels:
          cluster: local
        # 等待服务器响应请求的最长时间。
        timeout: 30s
        backoff_config:
          # 重试之间的初始退避时间
          min_period: 500ms
          # 重试之间的最大退避时间
          max_period: 5m
          # 配置在请求失败时重试向Loki发送请求次数。
          max_retries: 10

    positions:
      filename: /run/promtail/positions.yaml
      sync_period: 10s
      ignore_invalid_yaml: false

    limits_config:
    # 当为true时,强制对Promtail实例执行速率限制。
      readline_rate_enabled: true
    # 当为true时,超过速率限制会导致该Promtail实例丢弃日志行,而不是发送到Loki。当为false时,超过速率限制会导致该Promtail实例暂时停止发送日志行,并稍后重试。
      readline_rate_drop: false
    # 这个Promtail实例可以推送到Loki的每秒日志行速率限制。
      readline_rate: 10000
    # 这个Promtail实例可以推送到Loki的并发行数的限制。
      readline_burst: 20000
    # 限制最大活动流的数量0表示禁用。
      max_streams: 0
    # 允许的最大日志行字节大小,例如, 256kb, 2M。0表示禁用。
      max_line_size: 0
    # 是否截断超过max_line_size的行。如果max_line_size被禁用, 则无效。
      max_line_size_truncate: false

    target_config:
      # 同步目录和文件的周期，用于发现新的目录或停止监视已删除的目录。
      sync_period: "10s"

    # 配置Promtail如何使用指定的发现方法从一系列目标中抓取日志
    scrape_configs:
      - job_name: syslog
        pipeline_stages:
        - match:
            selector: '{job="syslog"}'
            stages:
            - regex:
                expression: '^(?P<Time>\S+\s+\d{1,2}\s\d{2}:\d{2}:\d{2}) (?P<Hostname>\S+) (?P<Module>\w+)(?P<MSG>.*)'
            - labels:
                Hostname:
                Module:
        static_configs:
        - targets:
            - localhost
          labels:
            job: syslog
            __path__: /var/log/messages

      - job_name: kubernetes-pods
        pipeline_stages:
          - cri: {}
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels:
              - __meta_kubernetes_pod_controller_name
            regex: ([0-9a-z-.]+?)(-[0-9a-f]{8,10})?
            action: replace
            target_label: __tmp_controller_name
          - source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_name
              - __meta_kubernetes_pod_label_app
              - __tmp_controller_name
              - __meta_kubernetes_pod_name
            regex: ^;*([^;]+)(;.*)?$
            action: replace
            target_label: app
          - source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_instance
              - __meta_kubernetes_pod_label_instance
            regex: ^;*([^;]+)(;.*)?$
            action: replace
            target_label: instance
          - source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_component
              - __meta_kubernetes_pod_label_component
            regex: ^;*([^;]+)(;.*)?$
            action: replace
            target_label: component
          - action: replace
            source_labels:
            - __meta_kubernetes_pod_node_name
            target_label: node_name
          - action: replace
            source_labels:
            - __meta_kubernetes_namespace
            target_label: namespace
          - action: replace
            replacement: $1
            separator: /
            source_labels:
            - namespace
            - app
            target_label: job
          - action: replace
            source_labels:
            - __meta_kubernetes_pod_name
            target_label: pod
          - action: replace
            source_labels:
            - __meta_kubernetes_pod_container_name
            target_label: container
          - action: replace
            replacement: /var/log/pods/*$1/*.log
            separator: /
            source_labels:
            - __meta_kubernetes_pod_uid
            - __meta_kubernetes_pod_container_name
            target_label: __path__
          - action: replace
            regex: true/(.*)
            replacement: /var/log/pods/*$1/*.log
            separator: /
            source_labels:
            - __meta_kubernetes_pod_annotationpresent_kubernetes_io_config_hash
            - __meta_kubernetes_pod_annotation_kubernetes_io_config_hash
            - __meta_kubernetes_pod_container_name
            target_label: __path__